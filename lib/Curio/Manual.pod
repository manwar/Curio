
=encoding utf8

=head1 NAME

Curio::Manual - The Curio developer's manual.



=head1 INTRODUCTION

=head2 What is Curio

=head2 Creating a Class

=head2 Synopsis Walkthrough



=head1 TOPICS

=head2 Custom Fetch Method

=head2 Exporting the Fetch Function

=head2 Caching Objects

=head2 Keys

=head2 Handling Arguments

=head2 Migrating and Merging Keys

=head2 The Resource Registry

=head2 Injecting Mock Objects



=head1 IMPORTANT PRACTICES

=head2 Avoid Holding onto Curio Objects and Resources

Curio is designed to make it cheap to retrieve Curio objects
and the underlying resources.  Take advantage of this.  Don't
pass around your resource objects or put them in attributes.
Instead, when you need them, get the from your Curio classes.

If your Curio class supports keys, then passing around the
key that you want particular code to be using, rather than the
Curio object or the resource, is a much better way of handling
things.

Read more of the reasoning for this in L<Curio/MOTIVATION>.

=head2 Use Curio Directly

It is tempting to use the L<Curio/INTEGRATIONS> such as
L<Catalyst::Model::Curio>, and sometimes it is necessary to do so.
Most of the time there is no need to add that extra layer of complexity.

Using Catalyst as an example, there are few reasons you can't
just use your Curio classes directly from your Catalyst controllers.

At ZipRecruiter, where we have some massive Catalyst applications, we
only use Catalyst models in the few cases where other parts of
Catalyst demand that models be setup.  For the most part we bypass the
model system completely and it makes everything much cleaner and
easier to deal with.

=head2 Appropriate Uses of Key Aliases

Key aliases are meant as a tool for migrating and merging keys.
They are meant to be something you temporarily setup as you change
your code to use the new keys, and then once done you remove the
aliases.

It can be tempting to use key aliases to provide simpler or alternative
names for existing keys.  The problem with doing this is now you've
introduced multiple keys for the same Curio class which in practice
does cause unnecessary confusion.



=head1 SUPPORT

See L<Curio/SUPPORT>.

=head1 AUTHORS

See L<Curio/AUTHORS>.

=head1 COPYRIGHT AND LICENSE

See L<Curio/COPYRIGHT AND LICENSE>.

=cut

